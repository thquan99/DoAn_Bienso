using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Data.OleDb;
using System.Drawing;
using System.Drawing.Printing;
using System.Drawing.Imaging;
using System.Text;
using System.Windows.Forms;
using System.IO;
using System.Threading;

using AForge;
using AForge.Imaging;
using AForge.Math;
using AForge.Imaging.Filters;
using AForge.Imaging.Textures;
using AForge.Video;
using AForge.Video.DirectShow;
using AForge.Vision.Motion;
using ZedGraph;


namespace prjNhanDang
{
    public partial class frmMain : Form
    {
        // motion detector
        private IMotionDetector detector = null;
        List<Bitmap> array_motion = new List<Bitmap>();
        Bitmap backgroundFrame, currentFrame;
        bool flag_motion;
        double alarm;
        int time;

        //**********************************************************

        //**********************************************************
        //network
        const int num_in_node = 200;   //200 ngo vao
        const int numlayers = 3;       //3 lop
        const int num_hide_node = 100;      //50 neuron o lop hiden
        //maximum layer
        const int max_layer = 200;

        int numletter;      //khi huan luyen:so mau dua vao mang(so ki tu moi hang)
        //khi nhan dang:tong so ki tu trong anh
        int numline;        //so hang ki tu
        int[] numword_eachline;   //mang chua so ki tu moi hang
        float alpha = 0.05F;
        Random rnd = new Random();

        int[] layer = new int[numlayers];
        float[, ,] weight = new float[numlayers, max_layer, max_layer];//[vi tri lop hien tai,vi tri noron lop hien tai,vi tri trong so tu noron lop truoc do]

        float[, ,] input_set = null;

        //mang chua ngo vao va ra tuong ung tai mot thoi diem
        float[] current_input = new float[num_in_node];
        //ngo ra tai moi lop
        float[,] node_output = new float[numlayers, max_layer];
        float[,] errors = new float[numlayers, max_layer];

        //*******************************************************

        //*******************************************************
        //thong so nhan dang
        const int char_output = 21;
        const int num_output = 10;
        const int char_hide = 100;//so noron lop an cho mang neuron chu
        const int num_hide = 100;//so noron lop an cho mang neuron so
        int[] layer_char = new int[numlayers];
        int[] layer_num = new int[numlayers];
        float[, ,] weight_char = new float[numlayers, max_layer, max_layer];
        float[, ,] weight_num = new float[numlayers, max_layer, max_layer];
        float[,] outnode_char = new float[numlayers, max_layer];
        float[,] outnode_num = new float[numlayers, max_layer];
        bool flag_0;
        bool flag_2;
        bool flag_5;

        //*******************************************************
        //file, data
        List<string> fore_files = new List<string>();
        List<string> back_files = new List<string>();
        string[] fore_file;
        string[] back_file;
        int fn_index;
        bool play;
        List<double> error_list = new List<double>();
        TimeSpan tsp;
        DateTime tbegin;
        double[] energy_array = new double[256];
        int stt;
        string num_plate = null;
        DataSet dtset = new DataSet();
        DataSet dts_print = new DataSet();
        DataTable dttable = new DataTable();
        DataGrid dtg = new DataGrid();

        const string strConn = "Provider = Microsoft.Jet.Oledb.4.0;Data Source = E:\\userdata.mdb";
        OleDbConnection conn;


        //*******************************************************
        //fft
        //khoi tao tri trong init()
        double hor_coe = 0;//he so nhan cua max value hor
        double ver_coe = 0;//he so nhan cua max value ver
        int number_coe = 0;//so hang blank
        double plate_ratio = 0; // ti le bien so xe
        int min_freq = 0;

        //*******************************************************
        //image
        Bitmap input_image;
        Bitmap[] image_array = null;
        int input_width;
        int input_height;
        Bitmap process_image;
        //xac dinh hang,cot
        int[,] his_hor = null;
        int[] his_ver = null;
        //xac dinh top,bottom,left,right
        int[, ,] num_hor = null;    //hang,so ki tu,left+right
        int[,] num_ver = null;     //hang,top+bottom


        //sample nhan dang
        char[] sample_char = new char[21];
        char[] sample_num = new char[10];
        string character = "ABCDEFGHKLMNPRSTUVXYZ";
        string number = "0123456789";
        
//================================================================        
        
        public frmMain()
        {
            InitializeComponent();
        }
//================================================================================
        private void frmMain_Load(object sender, EventArgs e)
        {
            character.CopyTo(0, sample_char, 0, 21);
            number.CopyTo(0, sample_num, 0, 10);
            stt = 0;
            btnPlay.Enabled = true;
            btnFirst.Enabled = false;
            btnLast.Enabled = false;
            btnNext.Enabled = false;
            btnBack.Enabled = false;
            btnStop.Enabled = false;
        }
//=========================================================================================
        private void loadVideoCaptureDeviceToolStripMenuItem_Click(object sender, EventArgs e)
        {

            frmVideoCaptureDevice form = new frmVideoCaptureDevice();

            if (form.ShowDialog(this) == DialogResult.OK)
            {
                // create video source
                VideoCaptureDevice videoSource = new VideoCaptureDevice(form.VideoDevice);

                // open it
                OpenVideoSource(videoSource);
                
            }
        }
//==============================================================
        private void OpenVideoSource(IVideoSource source)
        {
            // set busy cursor
            this.Cursor = Cursors.WaitCursor;

            // close previous video source
            CloseVideoSource();

            // create camera
            Camera camera= new Camera(source, detector);
            // start camera
            camera.Start();

            // attach camera to camera window
            cameraWindow1.Camera = camera;
            flag_motion = false;
            array_motion.Clear();
            alarm = 0;
            // start timer
            time = 0;
            timer1.Start();
            this.Cursor = Cursors.Default;
        }
//============================================================
        private void CloseVideoSource()
        {
            Camera camera = cameraWindow1.Camera;

            if (camera != null)
            {
                // stop timer
                timer1.Stop();

                // detach camera from camera window
                cameraWindow1.Camera = null;
                Application.DoEvents();

                // signal camera to stop
                camera.SignalToStop();
                // wait 2 seconds until camera stops
                for (int i = 0; (i < 20) && (camera.IsRunning); i++)
                {
                    Thread.Sleep(100);
                }
                if (camera.IsRunning)
                    camera.Stop();
                camera = null;

                // reset motion detector
                if (detector != null)
                    detector.Reset();
            }
        }
//===============================================================================
        
//===================================================================================

        private void openVideoFileToolStripMenuItem_Click(object sender, EventArgs e)
        {
            openFileDialog.Filter = "All File(*.*)|*.*";
            openFileDialog.FileName = "Video File";
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                // create video source
                FileVideoSource fileSource = new FileVideoSource(openFileDialog.FileName);
                init_database();
                // open it
                OpenVideoSource(fileSource);
            }
        }
//========================================================================
        private void init_database()
        {
            stt = 0;
            dataList.Items.Clear();
            string strcon = "Provider = Microsoft.Jet.Oledb.4.0;Data Source = printdata.mdb";
            conn = new OleDbConnection(strcon);
            conn.Open();
            OleDbDataAdapter dtadapter = new OleDbDataAdapter("Select * From tableprint", conn);
            dtadapter.Fill(dts_print, "tableprint");
            conn.Close();
            conn.Open();
            strcon = "Provider = Microsoft.Jet.Oledb.4.0;Data Source = userdata.mdb";
            conn = new OleDbConnection(strcon);
            dtadapter = new OleDbDataAdapter("Select * From basicdata", conn);
            dtadapter.Fill(dtset, "basicdata");
            dttable = dtset.Tables[0];
            conn.Close();
        }
//==========================================================================
        private void saveImageToolStripMenuItem_Click(object sender, EventArgs e)
        {
            save_bitmap();
        }
//==========================================================================

        private void save_bitmap()
        {
            saveFileDialog.Filter = "Image(*.bmp)|*.bmp";
            if (saveFileDialog.ShowDialog() == DialogResult.OK)
            {
                ImageFormat format = ImageFormat.Bmp;
                if (saveFileDialog.FileName != null)
                {
                    picture.Image.Save(saveFileDialog.FileName, format);
                }
            }
        }
//================================================================================
        private void loadNetworkToolStripMenuItem_Click(object sender, EventArgs e)
        {
            load_network_char();
            load_network_num();
        }
 //==================================================================================       
        private void load_network_char()
        {

            form_network_char();
            openFileDialog.InitialDirectory = Application.StartupPath;
            openFileDialog.Filter = "Artificial Neural Network Files (*.ann)|*.ann";
            openFileDialog.FileName = "character network";
            string line;
            char[] w_char = new char[20];
            string weight_text = "";
            int title_length, weight_length;
            if ((openFileDialog.ShowDialog() == DialogResult.OK))
            {
                if (openFileDialog.FileName != "")
                {
                    StreamReader network_load_file_stream = new StreamReader(openFileDialog.FileName);
                    string network_file_name = Path.GetFileNameWithoutExtension(openFileDialog.FileName);

                    for (int i = 0; i < 7; i++)
                        network_load_file_stream.ReadLine();
                    //lay gia tri alpha
                    weight_text = "";
                    line = network_load_file_stream.ReadLine();
                    title_length = ("Sigmoid Slope	= ").Length;
                    weight_length = line.Length - title_length;
                    line.CopyTo(title_length, w_char, 0, weight_length);
                    for (int counter = 0; counter < weight_length; counter++)
                        weight_text = weight_text + w_char[counter].ToString();
                    alpha = (float)Convert.ChangeType(weight_text, typeof(float));
                    for (int i = 1; i < numlayers; i++)
                        for (int j = 0; j < layer_char[i]; j++)
                            for (int k = 0; k < layer_char[i - 1]; k++)
                            {
                                weight_text = "";
                                line = network_load_file_stream.ReadLine();
                                title_length = ("Weight[" + i.ToString() + " , " + j.ToString() + " , " + k.ToString() + "] = ").Length;
                                weight_length = line.Length - title_length;
                                line.CopyTo(title_length, w_char, 0, weight_length);
                                for (int counter = 0; counter < weight_length; counter++)
                                    weight_text = weight_text + w_char[counter].ToString();
                                weight_char[i, j, k] = (float)Convert.ChangeType(weight_text, typeof(float));
                            }
                    network_load_file_stream.Close();
                }
            }
        }
//===========================================================================================
        private void load_network_num()
        {

            form_network_num();
            openFileDialog.InitialDirectory = Application.StartupPath;
            openFileDialog.Filter = "Artificial Neural Network Files (*.ann)|*.ann";
            openFileDialog.FileName = "number network";
            string line;
            char[] w_char = new char[20];
            string weight_text = "";
            int title_length, weight_length;
            if ((openFileDialog.ShowDialog() == DialogResult.OK))
            {
                if (openFileDialog.FileName != "")
                {
                    StreamReader network_load_file_stream = new StreamReader(openFileDialog.FileName);
                    string network_file_name = Path.GetFileNameWithoutExtension(openFileDialog.FileName);

                    for (int i = 0; i < 7; i++)
                        network_load_file_stream.ReadLine();
                    //lay gia tri alpha
                    weight_text = "";
                    line = network_load_file_stream.ReadLine();
                    title_length = ("Sigmoid Slope	= ").Length;
                    weight_length = line.Length - title_length;
                    line.CopyTo(title_length, w_char, 0, weight_length);
                    for (int counter = 0; counter < weight_length; counter++)
                        weight_text = weight_text + w_char[counter].ToString();
                    alpha = (float)Convert.ChangeType(weight_text, typeof(float));
                    for (int i = 1; i < numlayers; i++)
                        for (int j = 0; j < layer_num[i]; j++)
                            for (int k = 0; k < layer_num[i - 1]; k++)
                            {
                                weight_text = "";
                                line = network_load_file_stream.ReadLine();
                                title_length = ("Weight[" + i.ToString() + " , " + j.ToString() + " , " + k.ToString() + "] = ").Length;
                                weight_length = line.Length - title_length;
                                line.CopyTo(title_length, w_char, 0, weight_length);
                                for (int counter = 0; counter < weight_length; counter++)
                                    weight_text = weight_text + w_char[counter].ToString();
                                weight_num[i, j, k] = (float)Convert.ChangeType(weight_text, typeof(float));
                            }
                    network_load_file_stream.Close();
                }
            }
        }
//==============================================================================
        private void form_network_char()
        {
            layer_char[0] = num_in_node;
            layer_char[numlayers - 1] = char_output;
            for (int i = 1; i < numlayers - 1; i++)
                layer_char[i] = char_hide;
        }
        private void form_network_num()
        {
            layer_num[0] = num_in_node;
            layer_num[numlayers - 1] = num_output;
            for (int i = 1; i < numlayers - 1; i++)
                layer_num[i] = num_hide;
        }

        private void loadDataToolStripMenuItem_Click(object sender, EventArgs e)
        {
            timer1.Stop();
            file_data();
            fn_index = 0;
            //define value for fft
            hor_coe = 0.5;
            ver_coe = 0.4;
            number_coe = 7;
            plate_ratio = 14;
            min_freq = 100;
            play = false;
            //
            init_database();
            timer2.Start();
            MessageBox.Show("Data loaded", "Notice", MessageBoxButtons.OK, MessageBoxIcon.Information);
        }
//============================================================================================
        private void file_data()
        {
            string folder =Application.StartupPath + "\\foreground";
            string bfolder = Application.StartupPath + "\\background";
            foreach (string file in Directory.GetFiles(folder, "*.jpg"))
            {
                fore_files.Add(folder + "\\" + Path.GetFileName(file));
                back_files.Add(bfolder + "\\" + Path.GetFileNameWithoutExtension(file) + "nen.jpg");
            }
            fore_file = fore_files.ToArray();
            back_file = back_files.ToArray();
        }
//==========================================================================
        private void exitToolStripMenuItem_Click(object sender, EventArgs e)
        {

            CloseVideoSource();
            Application.Exit();
        }
//========================================================================
        private void btnPlay_Click(object sender, EventArgs e)
        {
            play = true;
            btnStop.Enabled = true;
            btnFirst.Enabled = true;
            btnNext.Enabled = true;
            btnLast.Enabled = true;
            btnBack.Enabled = true;
        }
//=========================================================================
        private void show_image(Bitmap img)
        {
            if (img.Height > picture.Height || img.Width > picture.Width)
                picture.SizeMode = PictureBoxSizeMode.StretchImage;
            picture.Image = img;
        }
 //==============================================================================
        private Bitmap fft(Bitmap img)
        {
            
            double w_ratio = 1.0 * img.Width / 512;//ti le theo chieu rong
            double h_ratio = 1.0 * img.Height / 256;//ti le theo chieu cao
            int top, bottom, left, right;

            IFilter filt = new ResizeBilinear(512, 256);
            img = filt.Apply(img);
            // create complex image from bitmap
            ComplexImage cimage = ComplexImage.FromBitmap(img);
            Complex[,] data_complex = cimage.Get_data;
            int h = data_complex.GetLength(0);
            int c = data_complex.GetLength(1);

            Complex[] data_row = new Complex[c];
            for (int i = 0; i < h; i++)
            {
                for (int j = 0; j < c; j++)
                    data_row[j] = data_complex[i, j];
                FourierTransform.FFT(data_row, FourierTransform.Direction.Forward);
                for (int j = 0; j < c; j++)
                    data_complex[i, j] = data_row[j];
            }

            double max = 0;
            int max_index = 0;
            for (int i = 0; i <h; i++)//h
            {
                double energy = 0;
                for (int j = min_freq; j < c; j++)//c
                {
                   
                    energy += (data_complex[i, j].SquaredMagnitude);
                }
                
                
                
                //
                energy = energy * 2 / c;
                if (max < energy)
                {
                    max = energy;
                    max_index = i;
                }
                energy_array[i] = energy;
            }
            //draw
            //Graphics g = Graphics.FromImage(img);
            //g.DrawCurve(new Pen(Color.Red, 2), values);

            //picture.Image = input_image;

            // horizon FFT
           
            int distance = 40;
            double thres = max * hor_coe;  //0.6
            bool f = false;
            int start, end;
            start = end = 0;
            int count = 0;
            for (int i = 10; i < h - 10; i++)//bo 10 hang o bien
            {
                if (energy_array[i] > thres)
                {
                    if (!f)
                    {
                        start = i;
                        f = true;
                    }
                    else
                        end = i;
                    count = 0;
                }
                else
                    count++;
                if (count > 7)     //video 10
                {
                    if ((end - start) < distance)
                    {
                        f = false;//tim lai start, end
                        if (i >= max_index)//tim lai nguong thres
                        {
                            max = energy_array[i];
                            for (int j = i + 1; j < h - 10; j++)//bo bien duoi 10hang
                            {
                                if (max < energy_array[j])
                                {
                                    max = energy_array[j];
                                    max_index = j;
                                }
                            }
                            thres = max * hor_coe;

                        }
                    }
                    else
                        break;
                }
            }
            top = (int)(start * h_ratio);
            bottom = (int)(end * h_ratio);
            //co resize anh truoc khi xu li FFT,luu y khi trich anh can nhan he so resize
            Bitmap extractimg = get_plate(img, start, end, 0, c - 1);

            //vertical fft
            filt = new ResizeBilinear(512, 64);
            extractimg = filt.Apply(extractimg);
            cimage = ComplexImage.FromBitmap(extractimg);
            data_complex = cimage.Get_data;
            h = data_complex.GetLength(0);
            c = data_complex.GetLength(1);
            Complex[] data_col = new Complex[h];
            for (int i = 0; i < c; i++)
            {
                for (int j = 0; j < h; j++)
                    data_col[j] = data_complex[j, i];
                FourierTransform.FFT(data_col, FourierTransform.Direction.Forward);
                for (int j = 0; j < h; j++)
                    data_complex[j, i] = data_col[j];
            }
            max = 0;
            max_index = 0;
            //dinh nghia lai mang theo chieu rong w=512
            energy_array = new double[512];
            for (int i = 0; i < c; i++)
            {
                double energy = 0;
                for (int j = 0; j < h; j++)
                {
                    energy += (data_complex[j, i].SquaredMagnitude);
                }
                energy = energy * 2 / h;//c;
                if (max < energy)
                {
                    max = energy;
                    max_index = i;
                }
                energy_array[i] = energy;
            }
            distance = 50;
            thres = max * ver_coe;
            f = false;
            start = end = 0;
            count = 0;
            for (int i = 10; i < c - 10; i++)//bo 2 bien ngang cua anh 10 hang
            {
                if (energy_array[i] > thres)
                {
                    if (!f)
                    {
                        start = i;
                        f = true;
                    }
                    else
                        end = i;
                    count = 0;
                }
                else
                    count++;
                if (count > number_coe)      //15 video
                {
                    if ((end - start) < distance)//cap nhat lai start,end
                    {
                        f = false;
                        if (i >= max_index)//tim lai nguong thres
                        {
                            max = energy_array[i];
                            for (int j = i + 1; j < c - 10; j++)//bo bien duoi 10hang
                            {
                                if (max < energy_array[j])
                                {
                                    max = energy_array[j];
                                    max_index = j;
                                }
                            }
                            thres = max * ver_coe;
                        }
                    }
                    else
                        break;
                }
            }
            left = (int)(start * w_ratio);
            right = (int)(end * w_ratio);
            top = (int)(bottom - (right - left) * plate_ratio / 19); //ratio=14 danh cho load data
            //trich anh ban dau input_image
            extractimg = get_plate(input_image, top, bottom, left, right);
            return extractimg;
            
        }
//==============================================================================
        private void recognition()
        {
            process_imginput(input_image);

            //define array

            numline = 2;
            his_ver = new int[input_height];
            his_hor = new int[numline, input_width];
            num_ver = new int[numline, 2];
            num_hor = new int[numline, 35, 2];//cap phat mang max=5 phan tu(khong cap phat 4:error)
            input_set = new float[1, num_in_node, 1];
            define_line(process_image, 10);
            //xac dinh chinh xac so hang
            for (int i = 0; i < numline; i++)
            {
                if (num_ver[i, 1] == 0)
                {
                    numline = i;
                    break;
                }
            }
            //redefine
            numword_eachline = new int[numline];
            for (int i = 0; i < numline; i++)
                numword_eachline[i] = 35;
            define_pos(process_image, 7);
            //xac dinh chinh xac so ki tu moi hang

            numletter = 0;
            for (int i = 0; i < numline; i++)
            {

                for (int j = 0; j < 35; j++)
                {

                    if (num_hor[i, j, 1] == 0)
                    {
                        numword_eachline[i] = j;
                        numletter += j;
                        break;
                    }
                }
            }

            //numletter=tong so ki tu trong anh
            image_array = new Bitmap[numletter];

            //blob_counter(process_image, image_array);
            get_bitmaparray(process_image, image_array);
            process_arraybitmap();
            ////display to picturebox
            //pic1.Image = image_array[0];
            //pic2.Image = image_array[1];
            //pic3.Image = image_array[2];
            //pic4.Image = image_array[3];
            //pic5.Image = image_array[4];
            //pic6.Image = image_array[5];
            //pic7.Image = image_array[6];
            //pic8.Image = image_array[7];
            ////display to picturebox
            //detect letter
            string result = "";
            num_plate = "";
            for (int i = 0; i < numletter; i++)
            {
                get_pixel(image_array[i], 0, 0);
                get_input(0, 0);
                if (i == 4)
                {
                    result += " ";
                }
                if (i == 2)
                {
                    result += "-";
                    cal_output_char();
                    result += detect_char(i);

                }
                else
                {
                    cal_output_num();
                    result += detect_num(i);
                }
            }
            num_plate = result;


        }
//=======================================================
        private void show_result()
        {

            tsp = DateTime.Now - tbegin;
            //hien thi ket qua
            tbegin = DateTime.Now;
            string tdate = tbegin.Hour.ToString("0#") + ":" + tbegin.Minute.ToString("0#") + ":" + tbegin.Second.ToString("0#") + " "
                + DateTime.Today.Day.ToString("0#") + "/" + DateTime.Today.Month.ToString("0#") + "/" + DateTime.Today.Year.ToString();
            lbPlate.Text = num_plate;
            show_info();
            DataRow newrow = dts_print.Tables["tableprint"].NewRow();
            newrow[0] = stt.ToString();
            newrow[1] = num_plate;
            newrow[2] = tsp.Seconds.ToString() + ":" + tsp.Milliseconds.ToString();
            newrow[3] = tdate;
           
            dts_print.Tables["tableprint"].Rows.Add(newrow);
            dataList.Items.Add(stt.ToString());
            dataList.Items[stt].SubItems.Add(num_plate);
            dataList.Items[stt].SubItems.Add(tsp.Seconds.ToString() + ":" + tsp.Milliseconds.ToString());
            dataList.Items[stt].SubItems.Add(tdate);
            
            stt++;

        }
    //========================================================================
        private void process_imginput(Bitmap img)
        {

            //grayscale
            IFilter way_filt;//= new GrayscaleY();
            //process_image = way_filt.Apply(img);
            //resize
            way_filt = new ResizeBilinear(360, 210);
            process_image = way_filt.Apply(img);
            process_image = get_plate(process_image, 10, 210, 30, 330);
            input_image = way_filt.Apply(input_image);
            //K-means
            process_image = kmean(process_image);
            //threshold
            way_filt = new Threshold(200);
            process_image = way_filt.Apply(process_image);

            //invert
            way_filt = new Invert();
            process_image = way_filt.Apply(process_image);



            way_filt = new Median();
            process_image = way_filt.Apply(process_image);

            //way_filt = new AdaptiveSmooth();
            //process_image = way_filt.Apply(process_image);
            //filter k
            BlobsFiltering filter = new BlobsFiltering();
            filter.MinHeight = 30;//50
            filter.MinWidth = 15;
            filter.MaxHeight = 100;
            filter.ApplyInPlace(process_image);

            input_width = process_image.Width;
            input_height = process_image.Height;

        }
   //=========================================================
        protected unsafe void define_line(Bitmap img, int thres)
        {
            int i, j;
            bool f;
            //vertical analyse
            int w = img.Width;
            int h = img.Height;
            /*
            BitmapData dataimg = img.LockBits(new Rectangle(0, 0, w, h),
                ImageLockMode.ReadOnly, PixelFormat.Format8bppIndexed);
            byte* scr = (byte*)dataimg.Scan0.ToPointer();
            for (i = 0; i < h; i++)
            {
                for (j = 0; j < w; j++, scr++)
                    his_ver[i] += *scr;
            }
            */

            for (i = 0; i < img.Height; i++)
            {
                for (j = 0; j < img.Width; j++)
                {
                    Color cr = img.GetPixel(j, i);
                    his_ver[i] += Convert.ToInt32(cr.R) / 255;
                }
            }

            //get top,bottom

            i = 0;//bo bien ngang tren cua bien so
            j = 0;
            f = false;
            while (i < h)
            {
                if (!f && his_ver[i] > thres)
                {
                    num_ver[j, 0] = i;
                    f = true;
                }
                if (f && ((his_ver[i] < thres) || i == h - 4))//bo bien ngang duoi bien so
                {
                    if ((i - num_ver[j, 0]) > 30)//check chieu cao cua ki tu
                    {
                        num_ver[j, 1] = i;
                        j++;
                    }
                    f = false;
                }
                i++;
                if (j == numline)
                    break;
            }
            //img.UnlockBits(dataimg);

        }
//===============================================================================
        private void define_pos(Bitmap img, int thres)
        {

            const int min_width = 20;//chieu rong toi thieu cac chu tru so 1
            const int min_pulse = 40;//so pixel toi thieu de kiem tra so 1
            const int min_1 = 5;//do rong toi thieu neu ki tu la so 1
            int i, j;
            bool f = false;
            bool check_max = false;
            for (i = 0; i < numline; i++)
            {
                histogram_ver(img, i, num_ver[i, 0], num_ver[i, 1]);
            }
            //get left,right      

            for (int k = 0; k < numline; k++)
            {
                i = 0;//bo bien doc trai bien so
                j = 0;

                while (i < img.Width)
                {
                    if (his_hor[k, i] > thres && !f)
                    {
                        num_hor[k, j, 0] = i;
                        f = true;
                    }
                    if (f && his_hor[k, i] > min_pulse)
                        check_max = true;
                    if (f && his_hor[k, i] < thres)
                    {
                        if ((i - num_hor[k, j, 0]) > min_width || (check_max && (i - num_hor[k, j, 0]) > min_1))
                        {
                            num_hor[k, j, 1] = i - 1;
                            j++;
                        }
                        f = false;
                        check_max = false;
                    }
                    i++;
                    if (j == numword_eachline[k] || i == img.Width - 3)//bo bien doc phai bien so
                        break;
                }
            }
        }
//=============================================================================
        private void histogram_ver(Bitmap img, int row, int top, int bottom)
        {
            for (int i = 0; i < img.Width; i++)
            {
                for (int j = top; j <= bottom; j++)
                {
                    Color cr = img.GetPixel(i, j);
                    his_hor[row, i] += Convert.ToInt16(cr.R) / 255;
                }
            }
        }
//===========================================================================
        
//==========================================================================
        protected unsafe Bitmap extractImg(Bitmap scr_img, int top, int bottom, int left, int right)
        {
            int width = right - left + 1;
            int height = bottom - top + 1;
            BitmapData scrdata = scr_img.LockBits(new Rectangle(0, 0, scr_img.Width, scr_img.Height),
                ImageLockMode.ReadOnly, PixelFormat.Format8bppIndexed);
            Bitmap dst_img = AForge.Imaging.Image.CreateGrayscaleImage(width, height);
            BitmapData dstdata = dst_img.LockBits(new Rectangle(0, 0, width, height),
                ImageLockMode.ReadOnly, PixelFormat.Format8bppIndexed);

            //copy pixel
            int xmin = left;
            int xmax = right;
            int ymin = top;
            int ymax = bottom;
            int scrstep = scrdata.Stride - width;
            int dststep = dstdata.Stride - width;
            byte* scr = (byte*)scrdata.Scan0.ToPointer() + ymin * scrdata.Stride + xmin;
            byte* dst = (byte*)dstdata.Scan0.ToPointer();

            for (int i = ymin; i <= ymax; i++)
            {
                for (int j = xmin; j <= xmax; j++, scr++, dst++)
                {
                    *dst = *scr;
                }
                scr += scrstep;
                dst += dststep;
            }
            scr_img.UnlockBits(scrdata);
            dst_img.UnlockBits(dstdata);
            return dst_img;
        }
//========================================================================
        private void get_bitmaparray(Bitmap img, Bitmap[] imgarray)
        {
            int k = 0;
            for (int i = 0; i < numline; i++)
                for (int j = 0; j < numword_eachline[i]; j++)
                {
                    imgarray[k] = extractImg(img, num_ver[i, 0], num_ver[i, 1], num_hor[i, j, 0], num_hor[i, j, 1]);
                    k++;
                }
//======================================================================
        }

        private void process_arraybitmap()
        {

            FiltersSequence filts = new FiltersSequence();
            filts.Add(new Dilatation());
            filts.Add(new Erosion());
            IFilter resize = new ResizeBilinear(10, 20);
            for (int i = 0; i < numletter; i++)
            {
                image_array[i] = filts.Apply(image_array[i]);
                BlobCounter blobs = new BlobCounter(image_array[i]);
                Blob[] words = blobs.GetObjects(image_array[i]);
                foreach (Blob word in words)
                    image_array[i] = word.Image;
                //image_array[i] = re_get_img(image_array[i]);
                image_array[i] = resize.Apply(image_array[i]);
            }
        }
//====================================================================
        protected unsafe Bitmap re_get_img(Bitmap img)
        {
            int w = img.Width;
            int h = img.Height;
            BitmapData dataimg = img.LockBits(new Rectangle(0, 0, w, h),
                ImageLockMode.ReadOnly, PixelFormat.Format8bppIndexed);
            byte* scr = (byte*)dataimg.Scan0.ToPointer();
            int[] row = new int[h];
            int[] col = new int[w];
            int i, j;
            for (i = 0; i < h; i++)
            {
                for (j = 0; j < w; j++, scr++)
                {
                    row[i] += *scr;
                    col[j] += *scr;
                }
            }
            img.UnlockBits(dataimg);
            int top, bottom, left, right;
            top = bottom = left = right = 0;
            for (i = 0; i < h; i++)
            {
                if (row[i] > 3)
                    break;
            }
            top = i;
            for (j = i + 1; j < h; j++)
            {
                if (row[j] < 3)
                    break;
            }
            bottom = j;
            for (i = 0; i < w; i++)
            {
                if (col[i] > 3)
                    break;
            }
            left = i;
            for (j = i + 1; j < w; j++)
            {
                if (col[j] < 3)
                    break;
            }
            right = j;
            if ((left != 0) || (right != 0) || (top != 0) || (bottom != 0))
                img = get_plate(img, top, bottom, left, right);
            return img;

        }
//===========================================================================
        protected unsafe void get_pixel(Bitmap img, int line, int letter)
        {
            BitmapData imgdata = img.LockBits(new Rectangle(0, 0, img.Width, img.Height),
                ImageLockMode.ReadOnly, PixelFormat.Format8bppIndexed);
            byte* scr = (byte*)imgdata.Scan0.ToPointer();

            for (int i = 0; i < 20; i++)
            {
                for (int j = 0; j < 10; j++, scr++)
                {
                    if (*scr == 255)
                        input_set[line, i * 10 + j, letter] = 1;
                    else
                        input_set[line, i * 10 + j, letter] = 0;
                }

            }
            img.UnlockBits(imgdata);
        }
//========================================================================
        private void get_input(int set_line, int set_num)
        {
            for (int i = 0; i < num_in_node; i++)
                current_input[i] = input_set[set_line, i, set_num];
        }
//======================================================================
        private void cal_output_char()
        {
            float f_net;
            int num_weight;
            for (int i = 0; i < numlayers; i++)
                for (int j = 0; j < layer_char[i]; j++)
                {
                    f_net = 0.0F;
                    if (i == 0) num_weight = 1; //lop input
                    else num_weight = layer_char[i - 1];

                    for (int k = 0; k < num_weight; k++)
                    {
                        if (i == 0)
                            f_net = current_input[j];
                        else
                            f_net += outnode_char[i - 1, k] * weight_char[i, j, k];
                    }
                    outnode_char[i, j] = sigmoid(f_net);
                }
        }
//============================================================================
        private void cal_output_num()
        {
            float f_net;
            int num_weight;
            for (int i = 0; i < numlayers; i++)
                for (int j = 0; j < layer_num[i]; j++)
                {
                    f_net = 0.0F;
                    if (i == 0) num_weight = 1; //lop input
                    else num_weight = layer_num[i - 1];

                    for (int k = 0; k < num_weight; k++)
                    {
                        if (i == 0)
                            f_net = current_input[j];
                        else
                            f_net += outnode_num[i - 1, k] * weight_num[i, j, k];
                    }
                    outnode_num[i, j] = sigmoid(f_net);
                }
        }
//===================================================================
        private float sigmoid(float f_net)
        {
            //float result=(float)(1/(1+Math.Exp (-1*slope*f_net)));		//Unipolar
            float result = (float)((2 / (1 + Math.Exp(-1 * alpha * f_net))) - 1);		//Bipolar			
            return result;
        }

//======================================================================
        private float sigmoid_derivative(float result)
        {
            //float derivative=(float)(alpha*result*(1-result));					//Unipolar
            float derivative = (float)(alpha * 0.5F * (1 - Math.Pow(result, 2)));			//Bipolar			
            return derivative;
        }
//========================================================================
        private char detect_char(int index1)
        {
            int index = 0;
            float max = 0;


            for (int i = 0; i < char_output; i++)
            {
                if (max < outnode_char[numlayers - 1, i])
                {
                    max = outnode_char[numlayers - 1, i];
                    index = i;
                }
            }
            if (max > 0)
                return sample_char[index];
            else
                return '?';

        }
//======================================================================
        private char detect_num(int index1)
        {
            int index = 0;
            float max = 0;

            for (int i = 0; i < num_output; i++)
            {
                if (max < outnode_num[numlayers - 1, i])
                {
                    max = outnode_num[numlayers - 1, i];
                    index = i;
                }
            }
            if (index == 5 || index == 6)
            {
                confusion_5_6(image_array[index1]);
                if (flag_5)
                    index = 5;
                else
                    index = 6;
            }
            else if (index == 7)
            {
                confusion_2_7(image_array[index1]);
                if (flag_2)
                    index = 2;
            }
            else if (index == 0 || index == 8)
            {
                confusion_0_8(image_array[index1]);
                if (flag_0)
                    index = 0;
                else
                    index = 8;
            }
            if (max > 0)
                return sample_num[index];
            else
                return '?';


        }
//=========================================================
        protected unsafe void confusion_5_6(Bitmap img)
        {
            int w = img.Width;
            int h = img.Height;
            BitmapData dataimg = img.LockBits(new Rectangle(0, 0, w, h),
                ImageLockMode.ReadOnly, PixelFormat.Format8bppIndexed);
            byte* scr = (byte*)dataimg.Scan0.ToPointer() + 12 * dataimg.Stride;
            flag_5 = false;
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < w / 2; j++, scr++)
                {
                    if (*scr == 255)
                    {
                        flag_5 = false;
                        break;
                    }
                    flag_5 = true;
                }
                if (flag_5)
                    break;
            }

            img.UnlockBits(dataimg);
        }
//=======================================================
        protected unsafe void confusion_2_7(Bitmap img)
        {
            int w = img.Width;
            int h = img.Height;
            int count = 0;
            BitmapData dataimg = img.LockBits(new Rectangle(0, 0, w, h),
                ImageLockMode.ReadOnly, PixelFormat.Format8bppIndexed);
            byte* scr = (byte*)dataimg.Scan0.ToPointer() + 17 * dataimg.Stride;
            for (int i = 0; i < 3; i++)
            {
                for (int j = 0; j < w; j++, scr++)
                {
                    if (*scr == 255)
                    {
                        count++;
                    }

                }
                if (count >= 5)
                {
                    flag_2 = true;
                    break;
                }
                else
                {
                    count = 0;
                    flag_2 = false;
                }
            }
            img.UnlockBits(dataimg);
        }
//=======================================================
        protected unsafe void confusion_0_8(Bitmap img)
        {
            int w = img.Width;
            int h = img.Height;
            BitmapData dataimg = img.LockBits(new Rectangle(0, 0, w, h),
                ImageLockMode.ReadOnly, PixelFormat.Format8bppIndexed);
            byte* scr = (byte*)dataimg.Scan0.ToPointer() + 5 * dataimg.Stride + 5;
            for (int i = 0; i < 10; i++)//do cao can quet
            {

                if (*scr == 255)
                {
                    flag_0 = false;
                    break;
                }
                scr += dataimg.Stride;
                flag_0 = true;
            }
            img.UnlockBits(dataimg);
        }
//=================================================================
        private void show_info()
        {

            bool f = true;
            foreach (DataRow dtrow in dttable.Rows)
            {
                if (lbPlate.Text == dtrow[1].ToString())
                {
                    
                    //lbInfo.Text = "Registered";
                    f = false;
                    break;
                }
            }
            if (f)
            {
                
                //lbInfo.Text = "Unregistered";
            }
        }
//===============================================================================
        protected unsafe Bitmap kmean(Bitmap img)
        {
            int w = img.Width;
            int h = img.Height;
            BitmapData datascr = img.LockBits(new Rectangle(0, 0, w, h),
                ImageLockMode.ReadOnly, PixelFormat.Format8bppIndexed);
            int[,] label = new int[h, w];
            int dim = 3;
            int[] counts = new int[dim];
            double[] c = new double[dim];
            double[] c1 = new double[dim];
            double old_error = 0;
            double error = 0;
            c1[0] = c[0] = 120;
            c1[1] = c[1] = 180;
            c1[2] = c[2] = 210;

            int step = datascr.Stride - w;
            int end, start;

            for (int p = 0; p < 8; p++)
            {
                start = p * h / 8;
                end = start + h / 8;
                do
                {
                    byte* scr = (byte*)datascr.Scan0.ToPointer() + datascr.Stride * start;
                    old_error = error;
                    error = 0;
                    for (int i = 0; i < dim; i++)
                    {
                        counts[i] = 0;
                        c1[i] = 0;
                    }
                    for (int i = start; i < end; i++)
                    {
                        for (int j = 0; j < w; j++, scr++)
                        {
                            double min_dist = double.MaxValue;
                            for (int k = 0; k < dim; k++)
                            {
                                double dist = 0;
                                dist = Math.Pow(*scr - c[k], 2);
                                if (dist < min_dist)
                                {
                                    min_dist = dist;
                                    label[i, j] = k;
                                }
                            }
                            c1[label[i, j]] += *scr;
                            counts[label[i, j]]++;
                            error += min_dist;
                        }

                        scr += step;
                    }
                    for (int q = 0; q < dim; q++)
                    {
                        c[q] = (counts[q] != 0) ? c1[q] / counts[q] : c1[q];
                    }
                    double temp = Math.Abs(error - old_error);

                } while (Math.Abs(error - old_error) > 0.001);
            }
            Bitmap dstimg = AForge.Imaging.Image.CreateGrayscaleImage(w, h);
            BitmapData datadst = dstimg.LockBits(new Rectangle(0, 0, w, h),
                ImageLockMode.ReadOnly, PixelFormat.Format8bppIndexed);
            byte* dst = (byte*)datadst.Scan0.ToPointer();
            byte* org = (byte*)datascr.Scan0.ToPointer();
            for (int i = 0; i < h; i++)
            {
                for (int j = 0; j < w; j++, org++, dst++)
                {
                    if (label[i, j] == 0)
                        *dst = *org;
                    else
                        *dst = 255;
                }
                dst += step;
                org += step;
            }
            img.UnlockBits(datascr);
            dstimg.UnlockBits(datadst);
            return dstimg;
        }
//======================================================================
        protected unsafe Bitmap get_plate(Bitmap img, int top, int bottom, int left, int right)
        {
            if (top < 0)
                top = 0;
            int h = bottom - top + 1;
            int w = right - left + 1;
            BitmapData dataimg = img.LockBits(new Rectangle(0, 0, img.Width, img.Height),
                ImageLockMode.ReadOnly, PixelFormat.Format8bppIndexed);
            Bitmap dstimg = AForge.Imaging.Image.CreateGrayscaleImage(w, h);
            BitmapData datadst = dstimg.LockBits(new Rectangle(0, 0, w, h),
                ImageLockMode.ReadWrite, PixelFormat.Format8bppIndexed);
            int stepimg = dataimg.Stride - w;
            int stepdst = datadst.Stride - w;
            int xmin = left;
            int xmax = right;
            int ymin = top;
            int ymax = bottom;
            byte* scr = (byte*)dataimg.Scan0.ToPointer() + ymin * dataimg.Stride + xmin;
            byte* dst = (byte*)datadst.Scan0.ToPointer();
            for (int i = ymin; i <= ymax; i++)
            {
                for (int j = xmin; j <= xmax; j++, scr++, dst++)
                    *dst = *scr;
                scr += stepimg;
                dst += stepdst;
            }
            img.UnlockBits(dataimg);
            dstimg.UnlockBits(datadst);
            return dstimg;
            
        }

        private void timer1_Tick(object sender, EventArgs e)
        {
            if (cameraWindow1.Camera.LastFrame != null)
            {
                cameraWindow1.Camera.Lock();
                if (!flag_motion)
                {
                    backgroundFrame = AForge.Imaging.Image.Clone(cameraWindow1.Camera.LastFrame);
                    flag_motion = true;
                }
                currentFrame = AForge.Imaging.Image.Clone(cameraWindow1.Camera.LastFrame);
                cameraWindow1.Camera.Unlock();
                process_motion();
                //textBox1.Text = alarm.ToString("0.###") + "  " + time.ToString();
            }
            if (alarm > 0.3)
            {
                array_motion.Add(AForge.Imaging.Image.Clone(currentFrame));
                time++;
            }
            else if (time > 10)
            {
                Bitmap[] bitmaps = array_motion.ToArray();
                int index = bitmaps.Length;
                //textBox1.Text = index.ToString();
                index = (int)(index * 0.54);
                input_image = bitmaps[index];
                picture.Image = input_image;
                array_motion.Clear();
                alarm = 0;
                time = 0;
                flag_motion = false;
                timer1.Stop();
                               
                // init fft
                hor_coe = 0.5;
                ver_coe = 0.4;
                number_coe = 25;
                plate_ratio = 15;
                min_freq = 50;
                tbegin = DateTime.Now;
                //input_image = sub_img.Apply(input_image);
                input_image = fft(input_image);
                IFilter filt = new BrightnessCorrection(0.2);
                input_image = filt.Apply(input_image);
                filt = new GrayscaleY();
                input_image = filt.Apply(input_image);
                //picture.Image = input_image;
                //pictureBox1.Image = backgroundFrame;
                recognition();
                show_result();
                //timer1.Start();
            }
        }
        
//======================================================================================       
        private void process_motion()
        {
            IFilter filt = new GrayscaleY();
            currentFrame = filt.Apply(currentFrame);
            backgroundFrame = filt.Apply(backgroundFrame);
            FiltersSequence filters = new FiltersSequence();
            Morph filt_morph = new Morph();
            filt_morph.OverlayImage = currentFrame;
            Bitmap tmp = filt_morph.Apply(backgroundFrame);
            filters.Add(new Difference(tmp));
            filters.Add(new Threshold(15));
            Bitmap tmp1 = filters.Apply(currentFrame);
            alarm = CalculateWhitePixels(tmp1);
        }
//===============================================================================
        private double CalculateWhitePixels(Bitmap image)
        {
            double count = 0;
            int width = image.Width;
            int height = image.Height;
            // lock difference image
            BitmapData data = image.LockBits(new Rectangle(0, 0, width, height),
                ImageLockMode.ReadOnly, PixelFormat.Format8bppIndexed);
            int offset = data.Stride - width;
            unsafe
            {
                byte* ptr = (byte*)data.Scan0.ToPointer();
                for (int y = 0; y < height; y++)
                {
                    for (int x = 0; x < width; x++, ptr++)
                    {
                        count += ((*ptr) >> 7);
                    }
                    ptr += offset;
                }
            }
            // unlock image
            image.UnlockBits(data);
            return count / (width * height);
        }

        private void timer2_Tick(object sender, EventArgs e)
        {
            if (play)
            {
                btnBack.Enabled = false;//pre
                btnNext.Enabled = false;//next
                btnLast.Enabled = false;//last
                btnFirst.Enabled = false;//first
                timer2.Stop();
                input_image = new Bitmap(fore_file[fn_index]);
                backgroundFrame = new Bitmap(back_file[fn_index]);
                show_image(input_image);
                fn_index++;
                tbegin = DateTime.Now;
                IFilter filt = new GrayscaleY();
                backgroundFrame = filt.Apply(backgroundFrame);
                input_image = filt.Apply(input_image);
                Subtract sub_img = new Subtract();
                sub_img.OverlayImage = backgroundFrame;
                input_image = sub_img.Apply(input_image);
                input_image = fft(input_image);
                recognition();
                show_result();
                if (fn_index == fore_file.Length)
                {
                    MessageBox.Show("End of Folder", "Notice", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    timer2.Stop();
                    btnPlay.Enabled = false;
                    play = false;
                    btnBack.Enabled = true;//pre
                    btnNext.Enabled = true;//next
                    btnLast.Enabled = true;//last
                    btnFirst.Enabled = true;//first
                }
                else
                    timer2.Start();

            }
        }
//=========================================================================
        private void openImageToolStripMenuItem_Click(object sender, EventArgs e)
        {
            backgroundFrame = new Bitmap(Application.StartupPath + "\\anh\\nen.jpg");
            //init_database();
            open_bitmap();
        }
//===============================================================================
        private void open_bitmap()
        {
            openFileDialog.InitialDirectory = Application.StartupPath + "\\foreground";
            openFileDialog.Filter = ("Image files (*.jpg,*.png,*.tif,*.bmp,*.gif)|*.jpg;*.png;*.tif;*.bmp;*.gif|JPG files (*.jpg)|*.jpg|PNG files (*.png)|*.png|TIF files (*.tif)|*.tif|BMP files (*.bmp)|*.bmp|GIF files (*.gif)|*.gif|All files(*.*)|*.*");
            if (openFileDialog.ShowDialog() == DialogResult.OK)
            {
                if (openFileDialog.FileName != null)
                {
                    StreamReader bitmap_file_stream = new StreamReader(openFileDialog.FileName);
                    string bmp_file_name = Path.GetFileName(openFileDialog.FileName);
                    input_image = new Bitmap(bmp_file_name);
                    bitmap_file_stream.Close();
                    picture.Image = input_image;
                }
                //IFilter filt = new GrayscaleY();
                //input_image = filt.Apply(input_image);
            }
          
        }

        private void btnStop_Click(object sender, EventArgs e)
        {
            play = false;
            btnBack.Enabled = true;//pre
            btnNext.Enabled = true;//next
            btnFirst.Enabled = true;//pre
            btnLast.Enabled = true;//next
            btnStop.Enabled = false;
        }

        private void checkToolStripMenuItem_Click(object sender, EventArgs e)
        {
            //define value for fft
            hor_coe = 0.5;
            ver_coe = 0.4;
            number_coe = 15;
            min_freq = 100;
            plate_ratio = 14;//14;
            tbegin = DateTime.Now;
            IFilter filt = new GrayscaleY();
            backgroundFrame = filt.Apply(backgroundFrame);
           
            input_image = filt.Apply(input_image);
            
            Subtract sub_img = new Subtract();
            sub_img.OverlayImage = backgroundFrame;
            Bitmap temp_img = sub_img.Apply(input_image);

            input_image = get_object(input_image, temp_img);
            picture.Image = input_image;
            input_image = fft(input_image);
            

            recognition();
            lbPlate.Text = num_plate;
            show_info();
        }
//========================================================================
        protected unsafe Bitmap get_object(Bitmap img1, Bitmap img2)
        {
            int w = img1.Width;
            int h = img1.Height;
            BitmapData datascr1 = img1.LockBits(new Rectangle(0, 0, w, h),
                ImageLockMode.ReadOnly, PixelFormat.Format8bppIndexed);
            BitmapData datascr2 = img2.LockBits(new Rectangle(0, 0, w, h),
                ImageLockMode.ReadOnly, PixelFormat.Format8bppIndexed);
            byte* scr1 = (byte*)datascr1.Scan0.ToPointer();
            byte* scr2 = (byte*)datascr2.Scan0.ToPointer();
            for (int i = 0; i < h; i++)
            {
                for (int j = 0; j < w; j++, scr1++, scr2++)
                {
                    if (*scr2 == 0)
                        *scr1 = 0;
                }
            }
            img1.UnlockBits(datascr1);
            img2.UnlockBits(datascr2);
            return img1;

        }

        private void btnBack_Click(object sender, EventArgs e)
        {
            if (!play && fn_index > 0)
            {
                fn_index--;
                input_image = new Bitmap(fore_file[fn_index]);
                backgroundFrame = new Bitmap(back_file[fn_index]);
                show_image(input_image);
                tbegin = DateTime.Now;
                IFilter filt = new GrayscaleY();
                backgroundFrame = filt.Apply(backgroundFrame);
                input_image = filt.Apply(input_image);
                Subtract sub_img = new Subtract();
                sub_img.OverlayImage = backgroundFrame;
                input_image = sub_img.Apply(input_image);
                //input_image = abtract_img(input_image, backgroundFrame);
                input_image = fft(input_image);
                recognition();
                show_result();
            }
        }

        private void btnNext_Click(object sender, EventArgs e)
        {
            if (!play && fn_index < (fore_file.Length - 1))
            {
                fn_index++;
                input_image = new Bitmap(fore_file[fn_index]);
                backgroundFrame = new Bitmap(back_file[fn_index]);
                show_image(input_image);
                tbegin = DateTime.Now;
                IFilter filt = new GrayscaleY();
                backgroundFrame = filt.Apply(backgroundFrame);
                input_image = filt.Apply(input_image);
                Subtract sub_img = new Subtract();
                sub_img.OverlayImage = backgroundFrame;
                input_image = sub_img.Apply(input_image);
                input_image = fft(input_image);
                recognition();
                show_result();
            }
        }

        private void btnFirst_Click(object sender, EventArgs e)
        {
            fn_index=0;
            input_image = new Bitmap(fore_file[fn_index]);
            backgroundFrame = new Bitmap(back_file[fn_index]);
            show_image(input_image);
            tbegin = DateTime.Now;
            IFilter filt = new GrayscaleY();
            backgroundFrame = filt.Apply(backgroundFrame);
            input_image = filt.Apply(input_image);
            Subtract sub_img = new Subtract();
            sub_img.OverlayImage = backgroundFrame;
            input_image = sub_img.Apply(input_image);
            input_image = fft(input_image);
            recognition();
            show_result();
        }

        private void btnLast_Click(object sender, EventArgs e)
        {
            fn_index=fore_file.Length-1;
            input_image = new Bitmap(fore_file[fn_index]);
            backgroundFrame = new Bitmap(back_file[fn_index]);
            show_image(input_image);
            tbegin = DateTime.Now;
            IFilter filt = new GrayscaleY();
            backgroundFrame = filt.Apply(backgroundFrame);
            input_image = filt.Apply(input_image);
            Subtract sub_img = new Subtract();
            sub_img.OverlayImage = backgroundFrame;
            input_image = sub_img.Apply(input_image);
            input_image = fft(input_image);
            recognition();
            show_result();
        }

        private void btnCapture_Click(object sender, EventArgs e)
        {
            timer1.Stop();
            cameraWindow1.Camera.Lock();
            picture.Image = AForge.Imaging.Image.Clone(cameraWindow1.Camera.LastFrame);
            cameraWindow1.Camera.Unlock();
            backgroundFrame = new Bitmap(Application.StartupPath + "\\anh\\nen.jpg");
            input_image = new Bitmap(picture.Image);

        }

        private void frmMain_FormClosing(object sender, FormClosingEventArgs e)
        {
            exitToolStripMenuItem_Click(sender, e);
        }
    }
}